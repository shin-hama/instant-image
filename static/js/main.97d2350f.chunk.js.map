{"version":3,"sources":["contexts/PasteDataProvider.tsx","contexts/StageRefProvider.tsx","contexts/TextEditorProvider.tsx","features/canvas/components/TextBlock.tsx","features/canvas/hooks/useWindowSize.ts","features/canvas/components/Canvas.tsx","features/canvas/components/Navbar.tsx","pages/Root.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["PasteData","React","undefined","PasteDataProvider","children","pasteData","setPasteData","handlePaste","e","clipboardData","files","length","file","getData","document","addEventListener","removeEventListener","Provider","value","StageRef","StageRefProvider","stageRef","StyledInputElement","styled","theme","width","fontSize","fontWeight","lineHeight","background","borderRadius","padding","transition","border","outline","palette","grey","TextEditorContext","Promise","resolve","msg","console","log","TextEditorProvider","setValue","pos","x","y","options","setOptions","resolveReject","setResolveReject","reject","edit","args","prev","handleClose","handleCancel","inputRef","handleComplete","current","getBoundingClientRect","style","position","left","top","InputUnstyled","autoFocus","placeholder","onChange","event","target","onKeyDown","key","onBlur","components","Input","TextBlock","point","defaultValue","useTheme","text","fontFamily","typography","draggable","onDblClick","textPos","absolutePosition","getStage","container","offsetLeft","offsetTop","hide","then","result","catch","finally","show","onClick","evt","preventDefault","getWindowSize","window","innerWidth","height","innerHeight","CreateShape","shape","p1","p2","config","handleTransformEnd","node","scaleX","scaleY","center","radius","Math","abs","radiusX","radiusY","fill","stroke","onTransformEnd","leftTop","min","widthHeight","points","strokeWidth","PasteObject","data","a","File","type","startsWith","reader","FileReader","onload","img","Image","src","toString","onerror","error","readAsDataURL","image","size","Canvas","shapeType","ShapeTypeContext","newShape","setNewShape","start","setStart","konvaItems","setKonvaItems","freePoints","setFreePoints","absPos","setAbsPos","transformerRef","windowSize","useState","setWindowSize","useEffect","onResize","useWindowSize","obj","func","handleMouseDown","getPointerPosition","clientX","clientY","handleTouchStart","touches","handleMouseMove","handleMouseUp","line","mode","drawFreeLine","setBackground","stageEnd","rect","listening","handleClick","nodes","testRef","Consumer","ref","onMouseDown","onTouchStart","onDragStart","onMouseMove","onTouchMove","onMouseUp","onTouchEnd","onTap","toArray","map","item","FlexDiv","flexGrow","Navbar","setShapeType","AppBar","Toolbar","FormControl","InputLabel","id","Select","labelId","label","MenuItem","Button","dataUrl","toDataURL","link","createElement","download","href","body","appendChild","click","removeChild","variant","Root","Box","onCopy","onPaste","customTheme","createTheme","App","ThemeProvider","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.97d2350f.chunk.js","sourcesContent":["import * as React from 'react'\n\ntype PasteDataProps = string | File | undefined\nexport const PasteData = React.createContext<PasteDataProps>(undefined)\n\nexport const PasteDataProvider: React.FC = ({ children }) => {\n  const [pasteData, setPasteData] = React.useState<string | File>()\n  const handlePaste = (e: ClipboardEvent) => {\n    if (e.clipboardData === null) {\n      return\n    }\n\n    if (e.clipboardData.files.length > 0) {\n      const file = e.clipboardData.files[0]\n      setPasteData(file)\n    } else {\n      setPasteData(e.clipboardData.getData('Text'))\n    }\n  }\n\n  React.useEffect(() => {\n    document.addEventListener('paste', handlePaste)\n\n    return () => {\n      document.removeEventListener('paste', handlePaste)\n    }\n  }, [])\n\n  return <PasteData.Provider value={pasteData}>{children}</PasteData.Provider>\n}\n","import Konva from 'konva'\nimport * as React from 'react'\n\ntype StageRefProps = React.RefObject<Konva.Stage> | undefined\nexport const StageRef = React.createContext<StageRefProps>(undefined)\n\nexport const StageRefProvider: React.FC = ({ children }) => {\n  const stageRef = React.useRef<Konva.Stage>(null)\n\n  return <StageRef.Provider value={stageRef}>{children}</StageRef.Provider>\n}\n","import * as React from 'react'\n// import TextField from '@mui/material/TextField'\nimport InputUnstyled from '@mui/base/InputUnstyled'\nimport { styled } from '@mui/system'\nimport { Vector2d } from 'konva/lib/types'\n\nconst StyledInputElement = styled('input')(({ theme }) => ({\n  width: '320px',\n  fontSize: 20,\n  fontWeight: 400,\n  lineHeight: 0,\n  background: 'transparent',\n  borderRadius: '0px',\n  padding: '0px',\n  transition: 'all 150ms ease',\n  border: 'none',\n\n  '&:focus': {\n    outline: 'none',\n    border: `1px solid ${theme.palette.grey[900]}`,\n    borderRadius: '0px',\n  },\n}))\n\ntype EditorOptions = {\n  pos: Vector2d\n  value: string\n}\n\nexport const TextEditorContext = React.createContext<\n  (args: EditorOptions) => Promise<string>\n>(() => {\n  return new Promise<string>((resolve) => {\n    const msg = 'not implemented'\n    console.log(msg)\n    resolve(msg)\n  })\n})\n\nconst initOptions = () => ({\n  pos: { x: 0, y: 0 },\n  value: '',\n})\n\nexport const TextEditorProvider: React.FC = ({ children }) => {\n  const [value, setValue] = React.useState('default')\n  const [options, setOptions] = React.useState<EditorOptions>(initOptions())\n  const [resolveReject, setResolveReject] = React.useState<\n    ((result: string) => void)[]\n  >([])\n  const [resolve, reject] = resolveReject\n\n  const edit = React.useCallback((args: EditorOptions) => {\n    setOptions((prev) => ({ ...prev, ...args }))\n    return new Promise<string>((resolve, reject) => {\n      setResolveReject([resolve, reject])\n    })\n  }, [])\n\n  React.useEffect(() => {\n    setValue(options.value)\n  }, [options])\n\n  const handleClose = React.useCallback(() => {\n    setResolveReject([])\n    setOptions(initOptions())\n  }, [])\n\n  const handleCancel = React.useCallback(() => {\n    if (reject) {\n      reject(value)\n      handleClose()\n    }\n  }, [reject, handleClose, value])\n\n  const inputRef = React.useRef<HTMLInputElement>()\n  const handleComplete = React.useCallback(() => {\n    console.log(inputRef.current?.getBoundingClientRect())\n    if (resolve) {\n      resolve(value)\n      handleClose()\n    }\n  }, [resolve, value, handleClose])\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    if (event.key === 'Enter') {\n      handleComplete()\n    } else if (event.key === 'Escape') {\n      handleCancel()\n    }\n  }\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>\n  ) => {\n    setValue(event.target.value)\n  }\n\n  const handleBlur = () => {\n    // When focus is out\n    handleComplete()\n  }\n\n  return (\n    <>\n      <TextEditorContext.Provider value={edit}>\n        {children}\n      </TextEditorContext.Provider>\n      {resolveReject.length > 0 && (\n        <div\n          style={{\n            position: 'absolute',\n            left: options.pos.x - 1,\n            top: options.pos.y - 3,\n          }}>\n          <InputUnstyled\n            autoFocus\n            value={value}\n            placeholder=\"Input Text\"\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n            onBlur={handleBlur}\n            components={{\n              Input: StyledInputElement,\n            }}\n          />\n        </div>\n      )}\n    </>\n  )\n}\n","import * as React from 'react'\nimport { Text } from 'react-konva'\nimport Konva from 'konva'\nimport { KonvaEventObject } from 'konva/lib/Node'\n\nimport { TextEditorContext } from 'contexts/TextEditorProvider'\nimport { useTheme } from '@mui/material/styles'\n\ntype Props = {\n  point: Konva.Vector2d\n  value?: string\n}\nconst TextBlock = ({ point, value: defaultValue = 'default' }: Props) => {\n  const [value, setValue] = React.useState(defaultValue)\n  const edit = React.useContext(TextEditorContext)\n  const theme = useTheme()\n\n  const handleDoubleClick = (event: KonvaEventObject<MouseEvent>) => {\n    const text = event.target\n    const textPos = text.absolutePosition()\n    const pos = {\n      x: textPos.x + (text.getStage()?.container().offsetLeft || 0),\n      y: textPos.y + (text.getStage()?.container().offsetTop || 0),\n    }\n    text.hide()\n    edit({ pos, value })\n      .then((result) => {\n        setValue(result)\n      })\n      .catch((result) => console.log(result))\n      .finally(() => text.show())\n  }\n\n  return (\n    <Text\n      text={value}\n      fontFamily={theme.typography.fontFamily}\n      fontSize={20}\n      {...point}\n      draggable\n      onDblClick={handleDoubleClick}\n      onClick={(e) => e.evt.preventDefault()}\n    />\n  )\n}\n\nexport default TextBlock\n","import { useState, useEffect } from 'react'\n\nconst getWindowSize = () => {\n  const { innerWidth: width, innerHeight: height } = window\n  return {\n    width,\n    height,\n  }\n}\nexport const useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState(getWindowSize())\n  useEffect(() => {\n    const onResize = () => {\n      setWindowSize(getWindowSize())\n    }\n    window.addEventListener('resize', onResize)\n\n    return () => window.removeEventListener('resize', onResize)\n  }, [])\n\n  return windowSize\n}\n","import * as React from 'react'\nimport {\n  Stage,\n  Layer,\n  Rect,\n  Line,\n  Ellipse,\n  Image as KonvaImage,\n  Transformer,\n} from 'react-konva'\nimport Konva from 'konva'\n\nimport { ShapeTypeContext } from 'pages/Root'\nimport { PasteData } from 'contexts/PasteDataProvider'\nimport { Vector2d } from 'konva/lib/types'\nimport TextBlock from './TextBlock'\nimport { TextEditorContext } from 'contexts/TextEditorProvider'\nimport { StageRef } from 'contexts/StageRefProvider'\nimport { useWindowSize } from '../hooks/useWindowSize'\n\nconst CreateShape = (\n  shape: string,\n  p1: Vector2d,\n  p2: Vector2d,\n  config: Konva.ShapeConfig = {\n    draggable: true,\n  }\n) => {\n  const handleTransformEnd = (e: Konva.KonvaEventObject<Event>) => {\n    const node = e.target\n\n    const scaleX = node.scaleX()\n    const scaleY = node.scaleY()\n    node.scaleX(1)\n    node.scaleY(1)\n\n    node.width(node.width() * scaleX)\n    node.height(node.height() * scaleY)\n  }\n  switch (shape) {\n    case 'Circle': {\n      const center = {\n        x: (p1.x + p2.x) / 2,\n        y: (p1.y + p2.y) / 2,\n      }\n      const radius = {\n        x: Math.abs(p1.x - p2.x) / 2,\n        y: Math.abs(p1.y - p2.y) / 2,\n      }\n      return (\n        <Ellipse\n          x={center.x}\n          y={center.y}\n          radiusX={radius.x}\n          radiusY={radius.y}\n          fill=\"gray\"\n          stroke=\"blue\"\n          onTransformEnd={handleTransformEnd}\n          {...config}\n        />\n      )\n    }\n    case 'Rect': {\n      const leftTop: Vector2d = {\n        x: Math.min(p1.x, p2.x),\n        y: Math.min(p1.y, p2.y),\n      }\n      const widthHeight: Vector2d = {\n        x: Math.abs(p1.x - p2.x),\n        y: Math.abs(p1.y - p2.y),\n      }\n      return (\n        <Rect\n          x={leftTop.x}\n          y={leftTop.y}\n          width={widthHeight.x}\n          height={widthHeight.y}\n          fill=\"gray\"\n          stroke=\"blue\"\n          onTransformEnd={handleTransformEnd}\n          {...config}\n        />\n      )\n    }\n    case 'Line':\n      return (\n        <Line\n          points={[p1.x, p1.y, p2.x, p2.y]}\n          stroke=\"blue\"\n          strokeWidth={4}\n          onTransformEnd={handleTransformEnd}\n          {...config}\n        />\n      )\n    default:\n      break\n  }\n}\n\nconst drawFreeLine = (\n  points: number[],\n  config: Konva.ShapeConfig = {\n    draggable: true,\n  }\n) => {\n  return (\n    <Line\n      points={points}\n      mode=\"source-over\"\n      stroke=\"blue\"\n      strokeWidth={4}\n      {...config}\n    />\n  )\n}\n\nconst PasteObject = async (data: string | File) => {\n  if (data instanceof File && data.type.startsWith('image')) {\n    const image = await new Promise<HTMLImageElement>((resolve, reject) => {\n      const reader = new FileReader()\n\n      reader.onload = () => {\n        const img = new Image()\n        img.onload = () => {\n          resolve(img)\n        }\n        img.src = reader.result?.toString() || ''\n      }\n      reader.onerror = (error) => reject(error)\n      reader.readAsDataURL(data)\n    })\n\n    const size = {\n      width: image.width,\n      height: image.height,\n    }\n    // Canvas のサイズを超えている場合は、Canvas をはみ出ないサイズに調整\n    // if (Math.max(size.width, size.height) > CANVAS_SIZE) {\n    //   const ratio = size.width / size.height\n    //   size.width = ratio > 1 ? 1 : ratio\n    //   size.height = ratio > 1 ? 1 / ratio : 1\n    // } else {\n    //   size.width /= CANVAS_SIZE\n    //   size.height /= CANVAS_SIZE\n    // }\n\n    return (\n      <KonvaImage\n        image={image}\n        x={0}\n        y={0}\n        width={size.width}\n        height={size.height}\n      />\n    )\n  }\n}\n\nexport const Canvas = () => {\n  const { shapeType } = React.useContext(ShapeTypeContext)\n  const [newShape, setNewShape] = React.useState<React.ReactNode>()\n  const [start, setStart] = React.useState<Vector2d>({\n    x: 0,\n    y: 0,\n  })\n  const [konvaItems, setKonvaItems] = React.useState<React.ReactNodeArray>([])\n  const [freePoints, setFreePoints] = React.useState<number[]>([])\n  const pasteData = React.useContext(PasteData)\n  const edit = React.useContext(TextEditorContext)\n  const [absPos, setAbsPos] = React.useState<Vector2d>()\n  const stageRef = React.useContext(StageRef)\n  const transformerRef = React.useRef<Konva.Transformer>(null)\n\n  const windowSize = useWindowSize()\n\n  React.useEffect(() => {\n    if (pasteData !== undefined) {\n      const func = async () => {\n        const obj = await PasteObject(pasteData)\n        setKonvaItems((prev) => [...prev, obj])\n      }\n      func()\n    }\n  }, [pasteData])\n\n  const handleMouseDown = (event: Konva.KonvaEventObject<MouseEvent>) => {\n    const pos = event.target.getStage()?.getPointerPosition()\n    if (pos) {\n      if (shapeType === 'Text') {\n        const { clientX, clientY } = event.evt\n        setAbsPos({\n          x: clientX,\n          y: clientY,\n        })\n      } else if (shapeType === 'Free') {\n        setFreePoints((prev) => [pos.x, pos.y, pos.x, pos.y])\n        return\n      }\n\n      const shape = CreateShape(shapeType, pos, pos)\n      setNewShape(shape)\n      setStart(pos)\n    }\n  }\n  const handleTouchStart = (event: Konva.KonvaEventObject<TouchEvent>) => {\n    const pos = event.target.getStage()?.getPointerPosition()\n    if (pos) {\n      if (shapeType === 'Text') {\n        const { clientX, clientY } = event.evt.touches[0]\n        setAbsPos({\n          x: clientX,\n          y: clientY,\n        })\n      } else if (shapeType === 'Free') {\n        setFreePoints((prev) => [pos.x, pos.y, pos.x, pos.y])\n        return\n      }\n\n      const shape = CreateShape(shapeType, pos, pos)\n      setNewShape(shape)\n      setStart(pos)\n    }\n\n    event.evt.preventDefault()\n  }\n\n  const handleMouseMove = (\n    event: Konva.KonvaEventObject<MouseEvent | TouchEvent>\n  ) => {\n    const pos = event.target.getStage()?.getPointerPosition()\n    if (pos && newShape) {\n      if (shapeType === 'Free') {\n        setFreePoints((prev) => [...prev, pos.x, pos.y])\n        return\n      }\n\n      const shape = CreateShape(shapeType, start, pos)\n      setNewShape(shape)\n    }\n\n    event.evt.preventDefault()\n  }\n\n  const handleMouseUp = (\n    event: Konva.KonvaEventObject<MouseEvent | TouchEvent>\n  ) => {\n    if (shapeType === 'Text') {\n      if (absPos && stageRef?.current) {\n        edit({\n          pos: absPos,\n          value: '',\n        }).then((result) => {\n          if (result) {\n            const shape = <TextBlock point={start} value={result} />\n            setKonvaItems((prev) => [...prev, shape])\n          }\n        })\n      }\n    }\n    if (newShape) {\n      setKonvaItems((prev) => [...prev, newShape])\n    }\n    setNewShape(undefined)\n    setStart({ x: 0, y: 0 })\n\n    event.evt.preventDefault()\n  }\n\n  React.useEffect(() => {\n    const line = drawFreeLine(freePoints)\n    setNewShape(line)\n  }, [freePoints])\n\n  const [background, setBackground] = React.useState<React.ReactNode>()\n\n  React.useEffect(() => {\n    if (stageRef?.current) {\n      const stageEnd = {\n        x: stageRef.current.width(),\n        y: stageRef.current.height(),\n      }\n      const rect = CreateShape('Rect', { x: 0, y: 0 }, stageEnd, {\n        fill: 'white',\n        stroke: 'transparent',\n        listening: false,\n      })\n      setBackground(rect)\n    }\n  }, [stageRef])\n\n  const handleClick = (e: Konva.KonvaEventObject<MouseEvent>) => {\n    console.log(e)\n    if (transformerRef.current === null) {\n      return\n    }\n\n    if (shapeType !== 'Select') {\n      return\n    }\n\n    if (e.target === e.target.getStage()) {\n      transformerRef.current.nodes([])\n      return\n    }\n    transformerRef.current.nodes([e.target])\n  }\n\n  const testRef = React.useRef<Konva.Rect>(null)\n  React.useEffect(() => {\n    if (transformerRef.current && testRef.current) {\n      transformerRef.current.nodes([testRef.current])\n    }\n  }, [])\n\n  return (\n    <TextEditorContext.Consumer>\n      {(value) => (\n        <Stage\n          ref={stageRef}\n          preventDefault\n          width={windowSize.width}\n          height={windowSize.height}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleTouchStart}\n          // Prevent to create a small shape on dragging is started when set Shape type is not \"select\"\n          onDragStart={() => newShape && setNewShape(undefined)}\n          onMouseMove={handleMouseMove}\n          onTouchMove={handleMouseMove}\n          onMouseUp={handleMouseUp}\n          onTouchEnd={handleMouseUp}\n          onClick={handleClick}\n          onTap={handleClick}>\n          <TextEditorContext.Provider value={value}>\n            <Layer>\n              {background}\n              {React.Children.toArray(konvaItems).map((item) => item)}\n              {newShape}\n              <Transformer ref={transformerRef} />\n            </Layer>\n          </TextEditorContext.Provider>\n        </Stage>\n      )}\n    </TextEditorContext.Consumer>\n  )\n}\n","import * as React from 'react'\nimport { styled } from '@mui/material'\nimport AppBar from '@mui/material/AppBar'\nimport Button from '@mui/material/Button'\nimport FormControl from '@mui/material/FormControl'\nimport InputLabel from '@mui/material/InputLabel'\nimport MenuItem from '@mui/material/MenuItem'\nimport Select, { SelectChangeEvent } from '@mui/material/Select'\nimport Toolbar from '@mui/material/Toolbar'\n\nimport { ShapeTypeContext } from 'pages/Root'\nimport { StageRef } from 'contexts/StageRefProvider'\n\nconst FlexDiv = styled('div')((theme) => ({\n  flexGrow: 1,\n}))\n\nconst Navbar = () => {\n  const { shapeType, setShapeType } = React.useContext(ShapeTypeContext)\n  const handleChange = (event: SelectChangeEvent) => {\n    setShapeType(event.target.value)\n  }\n  const stageRef = React.useContext(StageRef)\n  const handleDownload = () => {\n    if (stageRef?.current) {\n      const dataUrl = stageRef.current.toDataURL()\n      const link = document.createElement('a')\n      link.download = 'stage.png'\n      link.href = dataUrl\n      document.body.appendChild(link)\n      link.click()\n      document.body.removeChild(link)\n    }\n  }\n\n  return (\n    <AppBar>\n      <Toolbar>\n        <FormControl>\n          <InputLabel id=\"shape-select-label\">Shape</InputLabel>\n          <Select\n            labelId=\"shape-select-label\"\n            id=\"shape-select\"\n            value={shapeType}\n            label=\"Shape\"\n            onChange={handleChange}>\n            <MenuItem value={'Select'}>Select</MenuItem>\n            <MenuItem value={'Line'}>Line</MenuItem>\n            <MenuItem value={'Free'}>Free Line</MenuItem>\n            <MenuItem value={'Rect'}>Rect</MenuItem>\n            <MenuItem value={'Circle'}>Circle</MenuItem>\n            <MenuItem value={'Text'}>Text</MenuItem>\n          </Select>\n        </FormControl>\n        <FlexDiv />\n        <Button onClick={handleDownload} variant=\"contained\">\n          Download\n        </Button>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Navbar\n","import * as React from 'react'\nimport Box from '@mui/material/Box'\n\nimport { Canvas } from 'features/canvas/components/Canvas'\nimport Navbar from 'features/canvas/components/Navbar'\n\ntype ShapeTypeProps = {\n  shapeType: string\n  setShapeType: React.Dispatch<React.SetStateAction<string>>\n}\nexport const ShapeTypeContext = React.createContext<ShapeTypeProps>({\n  shapeType: 'Line',\n  setShapeType: () => {\n    // no run\n  },\n})\n\nconst Root = () => {\n  const [shapeType, setShapeType] = React.useState('Select')\n\n  return (\n    <Box>\n      <ShapeTypeContext.Provider value={{ shapeType, setShapeType }}>\n        <Navbar />\n        <Box\n          onCopy={() => console.log('handlePaste')}\n          onPaste={() => console.log('test')}>\n          <Canvas />\n        </Box>\n      </ShapeTypeContext.Provider>\n    </Box>\n  )\n}\n\nexport default Root\n","import * as React from 'react'\nimport { createTheme, ThemeProvider } from '@mui/material/styles'\n\nimport { PasteDataProvider } from 'contexts/PasteDataProvider'\nimport { StageRefProvider } from 'contexts/StageRefProvider'\nimport { TextEditorProvider } from 'contexts/TextEditorProvider'\nimport Root from 'pages/Root'\n\nconst customTheme = createTheme()\n\nfunction App() {\n  return (\n    <ThemeProvider theme={customTheme}>\n      <PasteDataProvider>\n        <StageRefProvider>\n          <TextEditorProvider>\n            <Root />\n          </TextEditorProvider>\n        </StageRefProvider>\n      </PasteDataProvider>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}